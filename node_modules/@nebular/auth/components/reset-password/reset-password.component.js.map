{"version":3,"file":"reset-password.component.js","sourceRoot":"","sources":["../../../../../.ng_build/auth/components/reset-password/reset-password.component.ts"],"names":[],"mappings":"AAKA,OAAO,EAAE,uBAAuB,EAAE,iBAAiB,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAC9F,OAAO,EAAE,MAAM,EAAE,MAAM,iBAAiB,CAAC;AACzC,OAAO,EAAE,eAAe,EAAE,MAAM,oBAAoB,CAAC;AACrD,OAAO,EAAE,iBAAiB,EAAE,MAAM,eAAe,CAAC;AAElD,OAAO,EAAE,aAAa,EAAE,MAAM,6BAA6B,CAAC;;IA6G1D,kCAAsB,OAAsB,EACG,SACzB,EAAqB,EACrB,MAAc;;QAHd,YAAO,GAAP,OAAO,CAAe;QACG,YAAO,GAAP,OAAO;QAChC,OAAE,GAAF,EAAE,CAAmB;QACrB,WAAM,GAAN,MAAM,CAAQ;6BAZZ,CAAC;4BACL,EAAE;wBACH,EAAE;yBAET,KAAK;sBACE,EAAE;wBACA,EAAE;oBACX,EAAE;QAOZ,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,cAAc,CAAC,mCAAmC,CAAC,CAAC;QAC9E,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,cAAc,CAAC,kCAAkC,CAAC,CAAC;QAC5E,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,8BAA8B,CAAC,CAAC;KACrE;IAED,4CAAS,GAAT;QAAA,iBAoBC;QAnBC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACjC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QAEtB,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,UAAC,MAAoB;YAClF,KAAI,CAAC,SAAS,GAAG,KAAK,CAAC;YACvB,EAAE,CAAC,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;gBACvB,KAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,WAAW,EAAE,CAAC;aACtC;YAAC,IAAI,CAAC,CAAC;gBACN,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC,SAAS,EAAE,CAAC;aAClC;YAED,IAAM,QAAQ,GAAG,MAAM,CAAC,WAAW,EAAE,CAAC;YACtC,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACb,UAAU,CAAC;oBACT,MAAM,CAAC,KAAI,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;iBAC5C,EAAE,KAAI,CAAC,aAAa,CAAC,CAAC;aACxB;YACD,KAAI,CAAC,EAAE,CAAC,aAAa,EAAE,CAAC;SACzB,CAAC,CAAC;KACJ;IAED,iDAAc,GAAd,UAAe,GAAW;QACxB,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;KACnD;;gBA5IF,SAAS,SAAC;oBACT,QAAQ,EAAE,wBAAwB;oBAClC,SAAS,EAAE,CAAC,gCAAgC,CAAC;oBAC7C,QAAQ,EAAE,k2HAyFT;oBACD,eAAe,EAAE,uBAAuB,CAAC,MAAM;iBAChD;;;;gBAjGQ,aAAa;gDA8GP,MAAM,SAAC,eAAe;gBAnHH,iBAAiB;gBAC1C,MAAM;;mCANf;;SA4Ga,wBAAwB","sourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { NB_AUTH_OPTIONS } from '../../auth.options';\nimport { getDeepFromObject } from '../../helpers';\n\nimport { NbAuthService } from '../../services/auth.service';\nimport { NbAuthResult } from '../../services/auth-result';\n\n@Component({\n  selector: 'nb-reset-password-page',\n  styleUrls: ['./reset-password.component.css'],\n  template: `\n    <nb-auth-block>\n      <h2 class=\"title\">Change password</h2>\n      <small class=\"form-text sub-title\">Please enter a new password</small>\n      <form (ngSubmit)=\"resetPass()\" #resetPassForm=\"ngForm\">\n\n        <nb-alert *ngIf=\"showMessages.error && errors?.length && !submitted\" outline=\"danger\">\n          <div><strong>Oh snap!</strong></div>\n          <div *ngFor=\"let error of errors\">{{ error }}</div>\n        </nb-alert>\n\n        <nb-alert *ngIf=\"showMessages.success && messages?.length && !submitted\" outline=\"success\">\n          <div><strong>Hooray!</strong></div>\n          <div *ngFor=\"let message of messages\">{{ message }}</div>\n        </nb-alert>\n\n        <div class=\"form-group\">\n          <label for=\"input-password\" class=\"sr-only\">New Password</label>\n          <input nbInput\n                 [(ngModel)]=\"user.password\"\n                 #password=\"ngModel\"\n                 type=\"password\"\n                 id=\"input-password\"\n                 name=\"password\"\n                 class=\"first\"\n                 placeholder=\"New Password\"\n                 autofocus\n                 fullWidth\n                 [status]=\"password.dirty ? (password.invalid  ? 'danger' : 'success') : ''\"\n                 [required]=\"getConfigValue('forms.validation.password.required')\"\n                 [minlength]=\"getConfigValue('forms.validation.password.minLength')\"\n                 [maxlength]=\"getConfigValue('forms.validation.password.maxLength')\">\n          <small class=\"form-text error\" *ngIf=\"password.invalid && password.touched && password.errors?.required\">\n            Password is required!\n          </small>\n          <small\n            class=\"form-text error\"\n            *ngIf=\"password.invalid && password.touched && (password.errors?.minlength || password.errors?.maxlength)\">\n            Password should contains\n            from {{getConfigValue('forms.validation.password.minLength')}}\n            to {{getConfigValue('forms.validation.password.maxLength')}}\n            characters\n          </small>\n        </div>\n\n        <div class=\"form-group\">\n          <label for=\"input-re-password\" class=\"sr-only\">Confirm Password</label>\n          <input nbInput\n                 [(ngModel)]=\"user.confirmPassword\"\n                 #rePass=\"ngModel\"\n                 id=\"input-re-password\"\n                 name=\"rePass\"\n                 type=\"password\"\n                 class=\"last\"\n                 placeholder=\"Confirm Password\"\n                 fullWidth\n                 [status]=\"rePass.touched\n                 ? (rePass.invalid || password.value != rePass.value ? 'danger' : 'success')\n                 : ''\"\n                 [required]=\"getConfigValue('forms.validation.password.required')\">\n          <small class=\"form-text error\"\n                 *ngIf=\"rePass.invalid && rePass.touched && rePass.errors?.required\">\n            Password confirmation is required!\n          </small>\n          <small\n            class=\"form-text error\"\n            *ngIf=\"rePass.touched && password.value != rePass.value && !rePass.errors?.required\">\n            Password does not match the confirm password.\n          </small>\n        </div>\n\n        <button nbButton\n                status=\"success\"\n                fullWidth\n                [disabled]=\"submitted || !resetPassForm.valid\"\n                [class.btn-pulse]=\"submitted\">\n          Change password\n        </button>\n      </form>\n\n      <div class=\"links col-sm-12\">\n        <small class=\"form-text\">\n          Already have an account? <a routerLink=\"../login\"><strong>Sign In</strong></a>\n        </small>\n        <small class=\"form-text\">\n          <a routerLink=\"../register\"><strong>Sign Up</strong></a>\n        </small>\n      </div>\n    </nb-auth-block>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NbResetPasswordComponent {\n\n  redirectDelay: number = 0;\n  showMessages: any = {};\n  strategy: string = '';\n\n  submitted = false;\n  errors: string[] = [];\n  messages: string[] = [];\n  user: any = {};\n\n  constructor(protected service: NbAuthService,\n              @Inject(NB_AUTH_OPTIONS) protected options = {},\n              protected cd: ChangeDetectorRef,\n              protected router: Router) {\n\n    this.redirectDelay = this.getConfigValue('forms.resetPassword.redirectDelay');\n    this.showMessages = this.getConfigValue('forms.resetPassword.showMessages');\n    this.strategy = this.getConfigValue('forms.resetPassword.strategy');\n  }\n\n  resetPass(): void {\n    this.errors = this.messages = [];\n    this.submitted = true;\n\n    this.service.resetPassword(this.strategy, this.user).subscribe((result: NbAuthResult) => {\n      this.submitted = false;\n      if (result.isSuccess()) {\n        this.messages = result.getMessages();\n      } else {\n        this.errors = result.getErrors();\n      }\n\n      const redirect = result.getRedirect();\n      if (redirect) {\n        setTimeout(() => {\n          return this.router.navigateByUrl(redirect);\n        }, this.redirectDelay);\n      }\n      this.cd.detectChanges();\n    });\n  }\n\n  getConfigValue(key: string): any {\n    return getDeepFromObject(this.options, key, null);\n  }\n}\n"]}