[{"__symbolic":"module","version":4,"metadata":{"NbRegisterComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":14,"character":1},"arguments":[{"selector":"nb-register","styleUrls":["./register.component.css"],"template":"\n    <nb-auth-block>\n      <h2 class=\"title\">Sign Up</h2>\n      <form (ngSubmit)=\"register()\" #form=\"ngForm\">\n\n        <nb-alert *ngIf=\"showMessages.error && errors?.length && !submitted\" outline=\"danger\">\n          <div><strong>Oh snap!</strong></div>\n          <div *ngFor=\"let error of errors\">{{ error }}</div>\n        </nb-alert>\n\n        <nb-alert *ngIf=\"showMessages.success && messages?.length && !submitted\" outline=\"success\">\n          <div><strong>Hooray!</strong></div>\n          <div *ngFor=\"let message of messages\">{{ message }}</div>\n        </nb-alert>\n\n        <div class=\"form-group\">\n          <label for=\"input-name\" class=\"sr-only\">Full name</label>\n          <input nbInput\n                 [(ngModel)]=\"user.fullName\"\n                 #fullName=\"ngModel\"\n                 id=\"input-name\"\n                 name=\"fullName\"\n                 placeholder=\"Full name\"\n                 autofocus\n                 fullWidth\n                 [status]=\"email.dirty ? (email.invalid  ? 'danger' : 'success') : ''\"\n                 [required]=\"getConfigValue('forms.validation.fullName.required')\"\n                 [minlength]=\"getConfigValue('forms.validation.fullName.minLength')\"\n                 [maxlength]=\"getConfigValue('forms.validation.fullName.maxLength')\">\n          <small class=\"form-text error\" *ngIf=\"fullName.invalid && fullName.touched && fullName.errors?.required\">\n            Full name is required!\n          </small>\n          <small\n            class=\"form-text error\"\n            *ngIf=\"fullName.invalid && fullName.touched && (fullName.errors?.minlength || fullName.errors?.maxlength)\">\n            Full name should contains\n            from {{getConfigValue('forms.validation.fullName.minLength')}}\n            to {{getConfigValue('forms.validation.fullName.maxLength')}}\n            characters\n          </small>\n        </div>\n\n        <div class=\"form-group\">\n          <label for=\"input-email\" class=\"sr-only\">Email address</label>\n          <input nbInput\n                 [(ngModel)]=\"user.email\"\n                 #email=\"ngModel\"\n                 id=\"input-email\"\n                 name=\"email\"\n                 pattern=\".+@.+..+\"\n                 placeholder=\"Email address\"\n                 fullWidth\n                 [status]=\"email.dirty ? (email.invalid  ? 'danger' : 'success') : ''\"\n                 [required]=\"getConfigValue('forms.validation.email.required')\">\n          <small class=\"form-text error\" *ngIf=\"email.invalid && email.touched && email.errors?.required\">\n            Email is required!\n          </small>\n          <small class=\"form-text error\"\n                 *ngIf=\"email.invalid && email.touched && email.errors?.pattern\">\n            Email should be the real one!\n          </small>\n        </div>\n\n        <div class=\"form-group\">\n          <label for=\"input-password\" class=\"sr-only\">Password</label>\n          <input nbInput\n                 [(ngModel)]=\"user.password\"\n                 #password=\"ngModel\"\n                 type=\"password\"\n                 id=\"input-password\"\n                 name=\"password\"\n                 placeholder=\"Password\"\n                 fullWidth\n                 [status]=\"email.dirty ? (email.invalid  ? 'danger' : 'success') : ''\"\n                 [required]=\"getConfigValue('forms.validation.password.required')\"\n                 [minlength]=\"getConfigValue('forms.validation.password.minLength')\"\n                 [maxlength]=\"getConfigValue('forms.validation.password.maxLength')\">\n          <small class=\"form-text error\" *ngIf=\"password.invalid && password.touched && password.errors?.required\">\n            Password is required!\n          </small>\n          <small\n            class=\"form-text error\"\n            *ngIf=\"password.invalid && password.touched && (password.errors?.minlength || password.errors?.maxlength)\">\n            Password should contains\n            from {{ getConfigValue('forms.validation.password.minLength') }}\n            to {{ getConfigValue('forms.validation.password.maxLength') }}\n            characters\n          </small>\n        </div>\n\n        <div class=\"form-group\">\n          <label for=\"input-re-password\" class=\"sr-only\">Repeat password</label>\n          <input nbInput\n                 [(ngModel)]=\"user.confirmPassword\"\n                 #rePass=\"ngModel\"\n                 type=\"password\"\n                 id=\"input-re-password\"\n                 name=\"rePass\"\n                 placeholder=\"Confirm Password\"\n                 fullWidth\n                 [status]=\"email.dirty ? (email.invalid || password.value != rePass.value  ? 'danger' : 'success') : ''\"\n                 [required]=\"getConfigValue('forms.validation.password.required')\">\n          <small class=\"form-text error\"\n                 *ngIf=\"rePass.invalid && rePass.touched && rePass.errors?.required\">\n            Password confirmation is required!\n          </small>\n          <small\n            class=\"form-text error\"\n            *ngIf=\"rePass.touched && password.value != rePass.value && !rePass.errors?.required\">\n            Password does not match the confirm password.\n          </small>\n        </div>\n\n        <div class=\"form-group accept-group col-sm-12\" *ngIf=\"getConfigValue('forms.register.terms')\">\n          <nb-checkbox name=\"terms\" [(ngModel)]=\"user.terms\" [required]=\"getConfigValue('forms.register.terms')\">\n            Agree to <a href=\"#\" target=\"_blank\"><strong>Terms & Conditions</strong></a>\n          </nb-checkbox>\n        </div>\n\n        <button nbButton\n                status=\"success\"\n                fullWidth\n                [disabled]=\"submitted || !form.valid\"\n                [class.btn-pulse]=\"submitted\">\n          Register\n        </button>\n      </form>\n\n      <div class=\"links\">\n\n        <ng-container *ngIf=\"socialLinks && socialLinks.length > 0\">\n          <small class=\"form-text\">Or connect with:</small>\n\n          <div class=\"socials\">\n            <ng-container *ngFor=\"let socialLink of socialLinks\">\n              <a *ngIf=\"socialLink.link\"\n                 [routerLink]=\"socialLink.link\"\n                 [attr.target]=\"socialLink.target\"\n                 [attr.class]=\"socialLink.icon\"\n                 [class.with-icon]=\"socialLink.icon\">{{ socialLink.title }}</a>\n              <a *ngIf=\"socialLink.url\"\n                 [attr.href]=\"socialLink.url\"\n                 [attr.target]=\"socialLink.target\"\n                 [attr.class]=\"socialLink.icon\"\n                 [class.with-icon]=\"socialLink.icon\">{{ socialLink.title }}</a>\n            </ng-container>\n          </div>\n        </ng-container>\n\n        <small class=\"form-text\">\n          Already have an account? <a routerLink=\"../login\"><strong>Sign in</strong></a>\n        </small>\n      </div>\n    </nb-auth-block>\n  ","changeDetection":{"__symbolic":"select","expression":{"__symbolic":"reference","module":"@angular/core","name":"ChangeDetectionStrategy","line":172,"character":19},"member":"OnPush"}}]}],"members":{"__ctor__":[{"__symbolic":"constructor","parameterDecorators":[null,[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Inject","line":187,"character":15},"arguments":[{"__symbolic":"reference","module":"../../auth.options","name":"NB_AUTH_OPTIONS","line":187,"character":22}]}],null,null],"parameters":[{"__symbolic":"reference","module":"../../services/auth.service","name":"NbAuthService","line":186,"character":33},null,{"__symbolic":"reference","module":"@angular/core","name":"ChangeDetectorRef","line":188,"character":28},{"__symbolic":"reference","module":"@angular/router","name":"Router","line":189,"character":32}]}],"register":[{"__symbolic":"method"}],"getConfigValue":[{"__symbolic":"method"}]}}}}]