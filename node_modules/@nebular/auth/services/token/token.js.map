{"version":3,"file":"token.js","sourceRoot":"","sources":["../../../../../.ng_build/auth/services/token/token.ts"],"names":[],"mappings":"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","sourcesContent":["import { urlBase64Decode } from '../../helpers';\n\nexport abstract class NbAuthToken {\n  abstract getValue(): string;\n  abstract isValid(): boolean;\n  abstract getPayload(): string;\n  // the strategy name used to acquire this token (needed for refreshing token)\n  abstract getOwnerStrategyName(): string;\n  abstract getCreatedAt(): Date;\n  abstract toString(): string;\n\n  getName(): string {\n    return (this.constructor as NbAuthTokenClass).NAME;\n  }\n}\n\nexport interface NbAuthRefreshableToken {\n  getRefreshToken(): string;\n  setRefreshToken(refreshToken: string);\n}\n\nexport interface NbAuthTokenClass<T = NbAuthToken> {\n  NAME: string;\n  new (raw: any, strategyName: string, expDate?: Date): T;\n}\n\nexport function nbAuthCreateToken<T extends NbAuthToken>(tokenClass: NbAuthTokenClass<T>,\n                                  token: any,\n                                  ownerStrategyName: string,\n                                  createdAt?: Date) {\n  return new tokenClass(token, ownerStrategyName, createdAt);\n}\n\nexport function decodeJwtPayload(payload: string): string {\n\n  if (!payload) {\n    throw new Error('Cannot extract payload from an empty token.');\n  }\n\n  const parts = payload.split('.');\n\n  if (parts.length !== 3) {\n    throw new Error(`The payload ${payload} is not valid JWT payload and must consist of three parts.`);\n  }\n\n  let decoded;\n  try {\n    decoded = urlBase64Decode(parts[1]);\n  } catch (e) {\n    throw new Error(`The payload ${payload} is not valid JWT payload and cannot be parsed.`);\n  }\n\n  if (!decoded) {\n    throw new Error(`The payload ${payload} is not valid JWT payload and cannot be decoded.`);\n  }\n\n  return JSON.parse(decoded);\n}\n\n/**\n * Wrapper for simple (text) token\n */\nexport class NbAuthSimpleToken extends NbAuthToken {\n\n  static NAME = 'nb:auth:simple:token';\n\n  constructor(protected readonly token: any,\n              protected readonly ownerStrategyName: string,\n              protected createdAt?: Date) {\n    super();\n    this.createdAt = this.prepareCreatedAt(createdAt);\n  }\n\n  protected prepareCreatedAt(date: Date) {\n    return date ? date : new Date();\n  }\n\n  /**\n   * Returns the token's creation date\n   * @returns {Date}\n   */\n  getCreatedAt(): Date {\n    return this.createdAt;\n  }\n\n  /**\n   * Returns the token value\n   * @returns string\n   */\n  getValue(): string {\n    return this.token;\n  }\n\n  getOwnerStrategyName(): string {\n    return this.ownerStrategyName;\n  }\n\n  getPayload(): string {\n    return null;\n  }\n\n  /**\n   * Is non empty and valid\n   * @returns {boolean}\n   */\n  isValid(): boolean {\n    return !!this.getValue();\n  }\n\n  /**\n   * Validate value and convert to string, if value is not valid return empty string\n   * @returns {string}\n   */\n  toString(): string {\n    return !!this.token ? this.token : '';\n  }\n}\n\n/**\n * Wrapper for JWT token with additional methods.\n */\nexport class NbAuthJWTToken extends NbAuthSimpleToken {\n\n  static NAME = 'nb:auth:jwt:token';\n\n  /**\n   * for JWT token, the iat (issued at) field of the token payload contains the creation Date\n   */\n  protected prepareCreatedAt(date: Date) {\n    let decoded;\n    try {\n      decoded = this.getPayload();\n    }\n    finally {\n      return decoded && decoded.iat ? new Date(Number(decoded.iat) * 1000) : super.prepareCreatedAt(date);\n    }\n  }\n\n  /**\n   * Returns payload object\n   * @returns any\n   */\n  getPayload(): any {\n    return decodeJwtPayload(this.token);\n  }\n\n  /**\n   * Returns expiration date\n   * @returns Date\n   */\n  getTokenExpDate(): Date {\n    const decoded = this.getPayload();\n    if (!decoded.hasOwnProperty('exp')) {\n      return null;\n    }\n    const date = new Date(0);\n    date.setUTCSeconds(decoded.exp); // 'cause jwt token are set in seconds\n    return date;\n  }\n\n  /**\n   * Is data expired\n   * @returns {boolean}\n   */\n  isValid(): boolean {\n    return super.isValid() && (!this.getTokenExpDate() || new Date() < this.getTokenExpDate());\n  }\n}\n\nconst prepareOAuth2Token = (data) => {\n  if (typeof data === 'string') {\n    try {\n      return JSON.parse(data);\n    } catch (e) {}\n  }\n  return data;\n};\n\n/**\n * Wrapper for OAuth2 token whose access_token is a JWT Token\n */\nexport class NbAuthOAuth2Token extends NbAuthSimpleToken {\n\n  static NAME = 'nb:auth:oauth2:token';\n\n  constructor( data: { [key: string]: string|number }|string = {},\n               ownerStrategyName: string,\n               createdAt?: Date) {\n\n    // we may get it as string when retrieving from a storage\n    super(prepareOAuth2Token(data), ownerStrategyName, createdAt);\n  }\n\n  /**\n   * Returns the token value\n   * @returns string\n   */\n  getValue(): string {\n    return this.token.access_token;\n  }\n\n  /**\n   * Returns the refresh token\n   * @returns string\n   */\n  getRefreshToken(): string {\n    return this.token.refresh_token;\n  }\n\n  /**\n   *  put refreshToken in the token payload\n    * @param refreshToken\n   */\n  setRefreshToken(refreshToken: string) {\n    this.token.refresh_token = refreshToken;\n  }\n\n  /**\n   * Returns token payload\n   * @returns any\n   */\n  getPayload(): any {\n    if (!this.token || !Object.keys(this.token).length) {\n      throw new Error('Cannot extract payload from an empty token.');\n    }\n\n    return this.token;\n  }\n\n  /**\n   * Returns the token type\n   * @returns string\n   */\n  getType(): string {\n    return this.token.token_type;\n  }\n\n  /**\n   * Is data expired\n   * @returns {boolean}\n   */\n  isValid(): boolean {\n    return super.isValid() && (!this.getTokenExpDate() || new Date() < this.getTokenExpDate());\n  }\n\n  /**\n   * Returns expiration date\n   * @returns Date\n   */\n  getTokenExpDate(): Date {\n    if (!this.token.hasOwnProperty('expires_in')) {\n      return null;\n    }\n    return new Date(this.createdAt.getTime() + Number(this.token.expires_in) * 1000);\n}\n\n  /**\n   * Convert to string\n   * @returns {string}\n   */\n  toString(): string {\n    return JSON.stringify(this.token);\n  }\n}\n\n/**\n * Wrapper for OAuth2 token\n */\nexport class NbAuthOAuth2JWTToken extends NbAuthOAuth2Token {\n\n  static NAME = 'nb:auth:oauth2:jwt:token';\n\n  /**\n   * for Oauth2 JWT token, the iat (issued at) field of the access_token payload\n   */\n  protected prepareCreatedAt(date: Date) {\n    let decoded;\n    try {\n       decoded = this.getAccessTokenPayload();\n    }\n    finally {\n      return decoded && decoded.iat ? new Date(Number(decoded.iat) * 1000) : super.prepareCreatedAt(date);\n    }\n  }\n\n\n  /**\n   * Returns access token payload\n   * @returns any\n   */\n  getAccessTokenPayload(): any {\n    return decodeJwtPayload(this.getValue())\n  }\n\n  /**\n   * Returns expiration date :\n   * - exp if set,\n   * - super.getExpDate() otherwise\n   * @returns Date\n   */\n  getTokenExpDate(): Date {\n    const accessTokenPayload = this.getAccessTokenPayload();\n    if (accessTokenPayload.hasOwnProperty('exp')) {\n      const date = new Date(0);\n      date.setUTCSeconds(accessTokenPayload.exp);\n      return date;\n    } else {\n      return super.getTokenExpDate();\n    }\n  }\n}\n"]}